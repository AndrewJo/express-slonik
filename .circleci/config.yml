# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.7.0
  codecov: codecov/codecov@3.2.2

jobs:
  test:
    docker:
      - image: cimg/node:lts
      - image: circleci/postgres:13-ram
        environment:
          POSTGRES_PASSWORD: circleci_test
    working_directory: ~/express-slonik
    steps:
      - checkout
      - node/install-npm
      - node/install-packages
      - run:
          name: Run tests
          command: PROPERTIES="BRANCH:${CIRCLE_BRANCH},BUILD_NUM:${CIRCLE_BUILD_NUM},COMMIT:${CIRCLE_SHA1}" npm run test:ci
          environment:
            NODE_ENV: test
            MOCHA_FILE: ./tests/results/mocha/results.xml
            DATABASE_URL: postgres://postgres:circleci_test@localhost:5432/circle_test
      - codecov/upload
      - store_test_results:
          path: tests/results
  build:
    docker:
      - image: cimg/node:lts
    working_directory: ~/express-slonik
    steps:
      - checkout
      - node/install-npm
      - node/install-packages
      - run:
          name: Build package
          command: |
            mkdir package
            npm pack --pack-destination package
      - persist_to_workspace:
          root: .
          paths:
            - "*"
      - store_artifacts:
          path: package
          destination: .
  publish:
    docker:
      - image: cimg/node:lts
    working_directory: ~/express-slonik
    steps:
      - attach_workspace:
          at: ~/express-slonik
      - run:
          name: Set NPM token
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - run: npm publish
      - unless:
          condition: << pipeline.git.tag >>
          steps:
            - run: npm publish --dry-run

workflows:
  build-and-publish:
    jobs:
      - test:
          filters:
            tags:
              only: /v\d+(?:\.\d+){0,2}(?:-\w+(?:\.\w+)*){0,1}/
      - build:
          requires:
            - test
          filters:
            tags:
              only: /v\d+(?:\.\d+){0,2}(?:-\w+(?:\.\w+)*){0,1}/
      - publish:
          context: npm
          requires:
            - build
          filters:
            branches:
              only: master
            tags:
              only: /v\d+(?:\.\d+){0,2}(?:-\w+(?:\.\w+)*){0,1}/
